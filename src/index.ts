import { Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import { config, SUBSCRIPTION_CHECK_INTERVAL, CHANNEL_USERNAME } from './config';

// –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
import { UserService } from './services/UserService';
import { SubscriptionService } from './services/SubscriptionService';
import { MessageService } from './services/MessageService';
import { MonitoringService } from './services/MonitoringService';
import { ReferralService } from './services/ReferralService';

// –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
import { StartHandler } from './handlers/startHandler';
import { HelpHandler } from './handlers/helpHandler';
import { SubscribeHandler } from './handlers/subscribeHandler';
import { CheckHandler } from './handlers/checkHandler';
import { CallbackHandlers } from './handlers/callbackHandlers';
import { ReferralHandler } from './handlers/referralHandler';

// –ò–º–ø–æ—Ä—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
import { messages } from './messages';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(config.botToken);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
const userService = new UserService();
const subscriptionService = new SubscriptionService();
const messageService = new MessageService();
const referralService = new ReferralService();
const monitoringService = new MonitoringService(bot, userService, subscriptionService, messageService);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
const startHandler = new StartHandler(userService, subscriptionService, referralService);
const helpHandler = new HelpHandler();
const subscribeHandler = new SubscribeHandler();
const checkHandler = new CheckHandler(userService, subscriptionService);
const callbackHandlers = new CallbackHandlers(userService, subscriptionService, referralService);
const referralHandler = new ReferralHandler(referralService, userService);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.start(async (ctx) => {
  await startHandler.handle(ctx);
});

bot.help(async (ctx) => {
  await helpHandler.handle(ctx);
});

bot.command('subscribe', async (ctx) => {
  await subscribeHandler.handle(ctx);
});

bot.command('check', async (ctx) => {
  await checkHandler.handle(ctx);
});

// –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.command('referral', async (ctx) => {
  await referralHandler.handle(ctx);
});

bot.command('leaderboard', async (ctx) => {
  await referralHandler.handleLeaderboard(ctx);
});

bot.command('mystats', async (ctx) => {
  await referralHandler.handleMyStats(ctx);
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.action('show_help', async (ctx) => {
  await callbackHandlers.showHelp(ctx);
});

bot.action('back_to_main', async (ctx) => {
  await callbackHandlers.backToMain(ctx);
});

bot.action('check_subscription', async (ctx) => {
  await callbackHandlers.checkSubscription(ctx);
});

// –ù–æ–≤—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
bot.action('referral_menu', async (ctx) => {
  await callbackHandlers.showReferralMenu(ctx);
});

bot.action('create_referral', async (ctx) => {
  await callbackHandlers.createReferral(ctx);
});

bot.action('my_referral_stats', async (ctx) => {
  await callbackHandlers.showMyReferralStats(ctx);
});

bot.action('show_leaderboard', async (ctx) => {
  await callbackHandlers.showLeaderboard(ctx);
});

bot.action('show_stats', async (ctx) => {
  await callbackHandlers.showStats(ctx);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
bot.on(message('text'), async (ctx) => {
  await ctx.reply(messages.unknownCommand);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  ctx.reply(messages.error);
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    console.log(`üì¢ –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: @${CHANNEL_USERNAME}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch();
    
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    console.log('üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫
    monitoringService.startMonitoring(SUBSCRIPTION_CHECK_INTERVAL);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
    process.once('SIGINT', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
      bot.stop('SIGINT');
    });
    
    process.once('SIGTERM', () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...');
      bot.stop('SIGTERM');
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
