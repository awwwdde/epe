import { Telegraf } from 'telegraf';
import { UserService } from './UserService';
import { SubscriptionService } from './SubscriptionService';
import { MessageService } from './MessageService';

// –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å–æ–∫
export class MonitoringService {
  constructor(
    private bot: Telegraf,
    private userService: UserService,
    private subscriptionService: SubscriptionService,
    private messageService: MessageService
  ) {}

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
  async checkAllSubscriptions(): Promise<void> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    for (const [userId, userData] of this.userService.getAllUsers().entries()) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
        const isBlocked = await this.subscriptionService.isUserBlocked(this.bot, userId);
        
        if (isBlocked) {
          console.log(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è—é –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);
          this.userService.removeUser(userId);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        const currentSubscription = await this.subscriptionService.checkSubscription(this.bot as any, userId);
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω, –∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø–∏—Å–∞–ª—Å—è
        if (userData.isSubscribed && !currentSubscription) {
          console.log(`üìâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–ø–∏—Å–∫–µ
          await this.messageService.sendUnsubscribeMessage(this.bot, userId);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
          this.userService.updateSubscriptionStatus(userId, false);
        } else if (!userData.isSubscribed && currentSubscription) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
          console.log(`üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª`);
          this.userService.updateSubscriptionStatus(userId, true);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      }
    }
    
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.userService.getUserCount()}`);
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  startMonitoring(interval: number): void {
    setInterval(() => {
      this.checkAllSubscriptions();
    }, interval);
    
    console.log(`‚è∞ –ó–∞–ø—É—â–µ–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ ${interval / 60000} –º–∏–Ω—É—Ç`);
  }
}
