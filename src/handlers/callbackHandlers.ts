import { Context } from 'telegraf';
import { messages } from '../messages';
import { keyboards } from '../keyboards';
import { UserService } from '../services/UserService';
import { SubscriptionService } from '../services/SubscriptionService';
import { ReferralService } from '../services/ReferralService';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
export class CallbackHandlers {
  constructor(
    private userService: UserService,
    private subscriptionService: SubscriptionService,
    private referralService: ReferralService
  ) {}

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
  async showHelp(ctx: Context): Promise<void> {
    await ctx.editMessageText(messages.help, {
      reply_markup: keyboards.help
    });
  }

  // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
  async backToMain(ctx: Context): Promise<void> {
    const userId = ctx.from?.id;
    
    if (!userId) {
      await ctx.answerCbQuery(messages.userNotFound);
      return;
    }

    const userData = this.userService.getUser(userId);
    if (userData?.isSubscribed) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      const successMessage = messages.getWelcomeSubscribed(ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
      
      await ctx.editMessageText(successMessage, {
        reply_markup: keyboards.getMainMenu(userId)
      });
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
  async showReferralMenu(ctx: Context): Promise<void> {
    const userId = ctx.from?.id;
    
    if (!userId) {
      await ctx.answerCbQuery(messages.userNotFound);
      return;
    }

    const message = `üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n` +
      `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
      `‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n` +
      `‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
      `‚Ä¢ –£–≤–∏–¥–µ—Ç—å —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n` +
      `üí° –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ —Å–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å!`;

    await ctx.editMessageText(message, {
      reply_markup: keyboards.referralMenu
    });
  }

  // –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
  async createReferral(ctx: Context): Promise<void> {
    const userId = ctx.from?.id;
    
    if (!userId) {
      await ctx.answerCbQuery(messages.userNotFound);
      return;
    }

    const username = ctx.from?.username;
    const firstName = ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingCode = this.referralService.getUserReferralCode(userId);
    
    if (existingCode) {
      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
      const referralCount = this.referralService.getUserReferralCount(userId);
      const botUsername = ctx.botInfo?.username;
      const referralLink = `https://t.me/${botUsername}?start=${existingCode}`;
      
      const message = `üîó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n` +
        `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: ${referralCount}\n\n` +
        `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n` +
        `<code>${referralLink}</code>\n\n` +
        `üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–æ–π
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É',
              url: referralLink
            },
            {
              text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
              callback_data: `copy_link_${existingCode}`
            }
          ],
          [
            {
              text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
              switch_inline_query: `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –ø–æ –º–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${referralLink}`
            }
          ],
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
              callback_data: 'referral_menu'
            }
          ]
        ]
      };
      
      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const referralCode = this.referralService.createReferralLink(userId, username, firstName);
    
    if (!referralCode) {
      await ctx.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', {
        reply_markup: keyboards.referralMenu
      });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userService.setReferralLink(userId, referralCode);

    const botUsername = ctx.botInfo?.username;
    const referralLink = `https://t.me/${botUsername}?start=${referralCode}`;
    
    const message = `üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
      `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n` +
      `<code>${referralLink}</code>\n\n` +
      `üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!\n` +
      `üìä –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–æ–ø–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–æ–π
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É',
            url: referralLink
          },
          {
            text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
            callback_data: `copy_link_${referralCode}`
          }
        ],
        [
          {
            text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
            switch_inline_query: `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –ø–æ –º–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${referralLink}`
          }
        ],
        [
          {
            text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
            callback_data: 'referral_menu'
          }
        ]
      ]
    };
    
    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard
    });
  }

  // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
  async copyLink(ctx: Context): Promise<void> {
    const callbackData = ctx.callbackQuery?.data;
    if (!callbackData) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏');
      return;
    }

    const code = callbackData.replace('copy_link_', '');
    const botUsername = ctx.botInfo?.username;
    const referralLink = `https://t.me/${botUsername}?start=${code}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    await ctx.reply(`üìã –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n<code>${referralLink}</code>\n\nüí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!`, {
      parse_mode: 'HTML'
    });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await ctx.answerCbQuery('‚úÖ –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—á–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async showMyReferralStats(ctx: Context): Promise<void> {
    const userId = ctx.from?.id;
    
    if (!userId) {
      await ctx.answerCbQuery(messages.userNotFound);
      return;
    }

    const referralCode = this.referralService.getUserReferralCode(userId);
    const referralCount = this.referralService.getUserReferralCount(userId);
    const stats = this.referralService.getReferralStats();

    if (!referralCode) {
      await ctx.editMessageText('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.', {
        reply_markup: keyboards.referralMenu
      });
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–æ–ø–µ
    const leaderboard = this.referralService.getLeaderboard();
    const position = leaderboard.findIndex(user => user.userId === userId) + 1;

    const message = `üìä –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
      `üîó –ö–æ–¥: ${referralCode}\n` +
      `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralCount} —á–µ–ª–æ–≤–µ–∫\n` +
      `üèÜ –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ: ${position > 0 ? position : '–ù–µ –≤ —Ç–æ–ø–µ'}\n\n` +
      `üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n` +
      `üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.totalReferrals}\n` +
      `üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${stats.activeReferrers}`;

    await ctx.editMessageText(message, {
      reply_markup: keyboards.referralMenu
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
  async showLeaderboard(ctx: Context): Promise<void> {
    const leaderboard = this.referralService.getLeaderboard(10);
    
    if (leaderboard.length === 0) {
      await ctx.editMessageText('üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', {
        reply_markup: keyboards.getMainMenu(ctx.from?.id || 0)
      });
      return;
    }

    let message = 'üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n\n';
    
    leaderboard.forEach((user, index) => {
      const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
      const username = user.username ? `@${user.username}` : user.firstName;
      message += `${medal} ${index + 1}. ${username} - ${user.referralCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
    });

    const stats = this.referralService.getReferralStats();
    message += `\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
      `üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.totalReferrals}\n` +
      `üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${stats.activeReferrers}`;

    await ctx.editMessageText(message, {
      reply_markup: keyboards.getMainMenu(ctx.from?.id || 0)
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async showStats(ctx: Context): Promise<void> {
    const userId = ctx.from?.id;
    
    if (!userId) {
      await ctx.answerCbQuery(messages.userNotFound);
      return;
    }

    const userData = this.userService.getUser(userId);
    const stats = this.referralService.getReferralStats();
    const referralCount = this.referralService.getUserReferralCount(userId);

    const message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n` +
      `üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n` +
      `‚Ä¢ ID: ${userId}\n` +
      `‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: ${userData?.isSubscribed ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n` +
      `‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã: ${referralCount} —á–µ–ª–æ–≤–µ–∫\n\n` +
      `üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
      `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.userService.getUserCount()}\n` +
      `‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö: ${this.userService.getUsersBySubscriptionStatus(true).length}\n` +
      `‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.totalReferrals}\n` +
      `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${stats.activeReferrers}`;

    await ctx.editMessageText(message, {
      reply_markup: keyboards.getMainMenu(userId)
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
  async checkSubscription(ctx: Context): Promise<void> {
    const userId = ctx.from?.id;
    
    if (!userId) {
      await ctx.answerCbQuery(messages.userNotFound);
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç" –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    await ctx.answerCbQuery(messages.checkingSubscription);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const isSubscribed = await this.subscriptionService.checkSubscription(ctx, userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userService.updateSubscriptionStatus(userId, isSubscribed);

    if (isSubscribed) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω
      await ctx.editMessageText(messages.subscriptionSuccess, {
        reply_markup: keyboards.checkSubscription
      });
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
      await ctx.editMessageText(messages.subscriptionNotSuccess, {
        reply_markup: keyboards.unsubscribe
      });
    }
  }
}
