import { Context } from 'telegraf';
import { User } from '../types';
import { messages } from '../messages';
import { keyboards } from '../keyboards';
import { UserService } from '../services/UserService';
import { SubscriptionService } from '../services/SubscriptionService';
import { ReferralService } from '../services/ReferralService';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
export class StartHandler {
  constructor(
    private userService: UserService,
    private subscriptionService: SubscriptionService,
    private referralService: ReferralService
  ) {}

  async handle(ctx: Context): Promise<void> {
    const user = ctx.from as User;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ start –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
    const startPayload = (ctx.message as any)?.text?.split(' ')[1];
    let referralMessage = '';
    
    if (startPayload) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
      const success = this.referralService.processReferral(startPayload, user.id);
      if (success) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
        this.userService.setReferredBy(user.id, startPayload);
        referralMessage = '\n\nüéâ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!';
      }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = this.userService.getOrCreateUser(user.id);
    
    // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const isSubscribed = await this.subscriptionService.checkSubscription(ctx, user.id);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    this.userService.updateSubscriptionStatus(user.id, isSubscribed);
    
    if (isSubscribed) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
      const successMessage = messages.getWelcomeSubscribed(user.first_name) + referralMessage;
      
      await ctx.reply(successMessage, {
        reply_markup: keyboards.getMainMenu(user.id)
      });
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
      const welcomeMessage = messages.getWelcomeNotSubscribed(user.first_name) + referralMessage;
      
      await ctx.reply(welcomeMessage, {
        reply_markup: keyboards.notSubscribed
      });
    }
  }
}
