import { Context } from 'telegraf';
import { ReferralService } from '../services/ReferralService';
import { UserService } from '../services/UserService';

export class ReferralHandler {
  constructor(
    private referralService: ReferralService,
    private userService: UserService
  ) {}

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /referral
  async handle(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const username = ctx.from?.username;
      const firstName = ctx.from?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingCode = this.referralService.getUserReferralCode(userId);
      
      if (existingCode) {
        // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
        const referralCount = this.referralService.getUserReferralCount(userId);
        const botUsername = ctx.botInfo?.username;
        const referralLink = `https://t.me/${botUsername}?start=${existingCode}`;
        
        const message = `üîó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞!\n\n` +
          `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö: ${referralCount}\n\n` +
          `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n` +
          `<code>${referralLink}</code>\n\n` +
          `üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!`;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–æ–π
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: 'üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É',
                url: referralLink
              },
              {
                text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
                callback_data: `copy_link_${existingCode}`
              }
            ],
            [
              {
                text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
                switch_inline_query: `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –ø–æ –º–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${referralLink}`
              }
            ],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
                callback_data: 'back_to_main'
              }
            ]
          ]
        };
        
        await ctx.reply(message, {
          parse_mode: 'HTML',
          reply_markup: keyboard
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
      const referralCode = this.referralService.createReferralLink(userId, username, firstName);
      
      if (!referralCode) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.userService.setReferralLink(userId, referralCode);

      const botUsername = ctx.botInfo?.username;
      const referralLink = `https://t.me/${botUsername}?start=${referralCode}`;
      
      const message = `üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
        `üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n` +
        `<code>${referralLink}</code>\n\n` +
        `üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!\n` +
        `üìä –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–æ–ø–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Å—ã–ª–∫–æ–π
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É',
              url: referralLink
            },
            {
              text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
              callback_data: `copy_link_${referralCode}`
            }
          ],
          [
            {
              text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
              switch_inline_query: `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –±–æ—Ç—É –ø–æ –º–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${referralLink}`
            }
          ],
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é',
              callback_data: 'back_to_main'
            }
          ]
        ]
      };
      
      await ctx.reply(message, {
        parse_mode: 'HTML',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ ReferralHandler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /leaderboard
  async handleLeaderboard(ctx: Context): Promise<void> {
    try {
      const leaderboard = this.referralService.getLeaderboard(10);
      
      if (leaderboard.length === 0) {
        await ctx.reply('üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤');
        return;
      }

      let message = 'üèÜ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n\n';
      
      leaderboard.forEach((user, index) => {
        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÖ';
        const username = user.username ? `@${user.username}` : user.firstName;
        message += `${medal} ${index + 1}. ${username} - ${user.referralCount} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
      });

      const stats = this.referralService.getReferralStats();
      message += `\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n` +
        `üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.totalReferrals}\n` +
        `üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${stats.activeReferrers}`;

      await ctx.reply(message);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ ReferralHandler.leaderboard:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mystats
  async handleMyStats(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }

      const referralCode = this.referralService.getUserReferralCode(userId);
      const referralCount = this.referralService.getUserReferralCount(userId);
      const stats = this.referralService.getReferralStats();

      if (!referralCode) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /referral –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ç–æ–ø–µ
      const leaderboard = this.referralService.getLeaderboard();
      const position = leaderboard.findIndex(user => user.userId === userId) + 1;

      const message = `üìä –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
        `üîó –ö–æ–¥: ${referralCode}\n` +
        `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${referralCount} —á–µ–ª–æ–≤–µ–∫\n` +
        `üèÜ –ü–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–ø–µ: ${position > 0 ? position : '–ù–µ –≤ —Ç–æ–ø–µ'}\n\n` +
        `üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n` +
        `üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: ${stats.totalReferrals}\n` +
        `üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: ${stats.activeReferrers}`;

      await ctx.reply(message);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ ReferralHandler.myStats:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }
}
